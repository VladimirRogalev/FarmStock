// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String  @unique
  password String?

  firstName     String  @default("not specified")
  lastName      String  @default("not specified")
  phoneNumber   String?
  oauthProvider String?

  roles EnumUserRoles[]

  farm Farm?

  orders Order[]

  OrderItem OrderItem[]

  @@map("user")
}

enum EnumUserRoles {
  CUSTOMER
  FARMER
  GUEST
  ADMIN
}

model Farm {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title            String
  description      String?
  address          String
  latitude         Decimal?
  longitude        Decimal?
  rating           Decimal   @default(0.0)
  howManyRatings   Int       @default(0) @map("how_many_ratings")
  successfulOrders Int       @default(0) @map("successful_orders")
  tags             String[]  @default([]) //TODO: to be replaced with Tag class?
  orderActive      Boolean   @default(false) @map("order_active")
  coverImage       String?
  contactEmail     String?
  contactPhone     String?
  website          String?

  ownerId String @unique
  owner   User   @relation(fields: [ownerId], references: [id])

  orders      Order[]       @relation("FarmToOrder")
  orderItems  OrderItem[]
  SurpriseBag SurpriseBag[]

  @@map("farm")
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  status EnumOrderStatus @default(PENDING)
  total  Decimal

  userId String
  user   User   @relation(fields: [userId], references: [id])

  farmId String?
  farm   Farm ?  @relation("FarmToOrder", fields: [farmId], references: [id])

  items OrderItem[]

  @@map("order")
}

enum EnumOrderStatus {
  PENDING
  PAID
  CANCELLED
}

model SurpriseBag {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String?
  category    EnumSurpriseBagCategory
  price       Decimal
  quantity    Int
  expiresAt   DateTime?
  images      String[]                @default([])

  address     String
  coordinates Decimal[]

  farmId String
  farm   Farm   @relation(fields: [farmId], references: [id])

  isActive  Boolean     @default(true)
  OrderItem OrderItem[]

  @@map("surprise_bag")
}

enum EnumSurpriseBagCategory {
  VEGETABLES
  FRUITS
  DAIRY
  BAKERY
  MIXED
}

model OrderItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  surpriseBag   SurpriseBag @relation(fields: [surpriseBagId], references: [id])
  surpriseBagId String

  farm   Farm   @relation(fields: [farmId], references: [id])
  farmId String

  quantity           Int               @default(1)
  price              Decimal
  availabilityStart  DateTime
  availabilityEnd    DateTime
  discountPercentage Decimal
  status             ReservationStatus @default(PENDING)

  @@map("order_item")
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  PICKED_UP
  CANCELLED
}
